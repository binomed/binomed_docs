:root{
    --color: red;
    --scheme: http;
    --hostname: localhost;
    --port: 3000;
    --path: assets/images;
    --prefix: http://localhost:3000/assets/images/;
    --img1: hack1.jpg;
    --img2: hack2.jpg;
    --height-panel: 700px;
    --height-bg: 250px;

    /*

    --randomColor: () => {
        let red = Math.random()*255;
        let green = Math.random()*255;
        let blue = Math.random()*255;
        return "rgb("+red+","+green+","+blue+")";
    };



    --dependancy: () => {
        let color = `var(--color)`;
        return color;
    };

    Simple use of variables for url
    --url: (img) => {
        let prefix = `var(--prefix)`;
        let urlConcat = prefix+img;
        return "url("+urlConcat.split(' ').join('')+")";
    };


    Complex form of use of variables;

    --url: (img) => {
        let scheme = `var(--scheme)`;
        let host = `var(--hostname)`;
        let port = var(--port);
        let path = `var(--path)`;
        let urlConcat = scheme+'://'+host+':'+port+'/'+path+'/'+img;
        return "url("+urlConcat.split(' ').join('')+")";
    };

    */

    --computeUrl:initial;

}

body>div{
    width: 100%;
    display: flex;
    flex-direction:column;
}

#demo-var, #demo-random-color, #demo-dependancy, #demo-args{
    align-items: initial;
    max-height: var(--height-panel);
}


.reveal .slides section .codemirror-code{
    flex:1;
    text-align: left;
    font-size: var(--codemiror-size, 30px);
}



#pure-css, #args-css {
    height: var(--height-panel);
}

#pure-css .bg, #args-css .bg{
    width: 100%;
    height: var(--height-bg);
    background-size:cover;
    background-image:var(--computeUrl);
    border: 3px dotted black;
    position: relative;
    margin: 6px 0px;
}

#pure-css .bg:before, #args-css .bg:before{
    position: absolute;
    line-height: var(--height-bg);
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
}


#pure-css, #random-color-css{
    background: var(--computeRandomColor);
}

#demo-var #codemirror-css{
    height: var(--height-panel);
}

#pure-css h1, #args-css h1{
    height: calc(var(--height-panel) - (2 * var(--height-bg)) - 20px);
    margin-bottom: 0;
}

#pure-css h1, #dependancy-css h1  {
    
    --color: blue;
    color: var(--computeDependancy);
}


#pure-css #bg1:before{
    content: '#pure-css #bg1';
}
#pure-css #bg2:before{
    content: '#pure-css #bg2';
}
#args-css #bg1-args:before{
    content: '#args-css #bg1';
}
#args-css #bg2-args:before{
    content: '#args-css #bg2';
}

#pure-css #bg1, #args-css #bg1-args {
    --imgToUse: var(--img1);
}
#pure-css #bg2, #args-css #bg2-args {
    --imgToUse: var(--img2);
}

/**
* PAINT API
*/

#demo-paint-api-js-in-css {
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: 50%;
    grid-template-rows: 50%;
}

#render-element-paint-api-js-in-css {
    position: relative;
    margin: 15px;
    grid-column: 2;
    grid-row: 1;
}

#codemirror-paint-api-js-in-css .CodeMirror-lines,
#codemirror-paint-api-js-in-css .CodeMirror-lines{
    font-size: 0.6em;
}

#codemirror-paint-api-js-in-css {
    margin: 15px;
    grid-column: 1;
    grid-row: 1 / span 2;
}

#codemirror-paint-api {
    margin: 15px;
    grid-column: 1 / span 2;
    grid-row: 2;
}
#render-element-paint-api-js-in-css {
    grid-row: 1 / span 2;
}
